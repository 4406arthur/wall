// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entity "wall/pkg/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindOne provides a mock function with given fields: tid
func (_m *Repository) FindOne(tid string) (*entity.TokenInfo, error) {
	// ret := _m.Called(tid)

	// var r0 *entity.TokenInfo
	// if rf, ok := ret.Get(0).(func(string) *entity.TokenInfo); ok {
	// 	r0 = rf(tid)
	// } else {
	// 	if ret.Get(0) != nil {
	// 		r0 = ret.Get(0).(*entity.TokenInfo)
	// 	}
	// }

	// var r1 error
	// if rf, ok := ret.Get(1).(func(string) error); ok {
	// 	r1 = rf(tid)
	// } else {
	// 	r1 = ret.Error(1)
	// }

	// return r0, r1
	sample := &entity.TokenInfo{
		Tid:      "123",
		OwnerID:  "google",
		Enabled:  true,
		CreateAt: 1243162741,
	}
	return sample, nil
}

// InsertOne provides a mock function with given fields: tid, ownerID
func (_m *Repository) InsertOne(tid string, ownerID string) (bool, error) {
	// ret := _m.Called(tid, ownerID)

	// var r0 bool
	// if rf, ok := ret.Get(0).(func(string, string) bool); ok {
	// 	r0 = rf(tid, ownerID)
	// } else {
	// 	r0 = ret.Get(0).(bool)
	// }

	// var r1 error
	// if rf, ok := ret.Get(1).(func(string, string) error); ok {
	// 	r1 = rf(tid, ownerID)
	// } else {
	// 	r1 = ret.Error(1)
	// }

	// return r0, r1
	return true, nil
}

// UpdateTokenStatus provides a mock function with given fields: tid, ownerID
func (_m *Repository) UpdateTokenStatus(tid string, ownerID string) (bool, error) {
	// ret := _m.Called(tid, ownerID)

	// var r0 bool
	// if rf, ok := ret.Get(0).(func(string, string) bool); ok {
	// 	r0 = rf(tid, ownerID)
	// } else {
	// 	r0 = ret.Get(0).(bool)
	// }

	// var r1 error
	// if rf, ok := ret.Get(1).(func(string, string) error); ok {
	// 	r1 = rf(tid, ownerID)
	// } else {
	// 	r1 = ret.Error(1)
	// }

	// return r0, r1
	return true, nil
}
